# Handles any action committed by user
from CodeList import *
import Utility
import KeyboardSets


class ActionHandler:
    def __init__(self, vkapi_handler, role_handler, db_handler, debug_mode=True):
        self.debug_mode = debug_mode
        self.vkapi_handler = vkapi_handler
        self.role_handler = role_handler
        self.db_handler = db_handler
        self.help_text = self.load_help()
        self.test = 0

        self.act_table = {
            # Put new actions here (don't forget to add the command in config)
            EVENT.REGISTER: self.register_prompt,

            CODE.RETURN: self._return,
            CODE.CONTINUE: self._continue,
            CODE.INFO_GROUP: self.info_group,
            CODE.INFO_STUDENT: self.info_student,
            # CODE.INFO_SCHOOL_GROUPS: self.info_school_groups,
            CODE.DELETE_GROUP: self.delete_group,
            CODE.DELETE_SCHOOL: self.delete_school,
            CODE.PM_MSG: self.pm_msg,
            CODE.GROUP_MSG: self.group_msg,
            CODE.REMOVE_USER_FROM_GROUP: self.expel_from_group,
            CODE.REMOVE_USER: self.expel,
            CODE.UPDATE_ROLE: self.update_role,
            CODE.USER_INFO: self.user_info,
            CODE.HELP: self.help,
            CODE.ECHO: self.echo,
            CODE.CREATE_SCHOOL: self.create_school,
            CODE.INVALID: self.invalid,
            CODE.REGISTER: self.register,
            CODE.INVITE_USER: self.invite_user,
            CODE.CREATE_GROUP: self.create_group,
            CODE.ADD_TO_GROUP: self.add_to_group,
            CODE.INFO_SCHOOL: self.info_school
        }

    def handle_act(self, code, update):
        self.act_table[code](update)

    def load_help(self):
        # Loads help string (use from another file)
        # Load CODE_DICT 'in reverse' so we can call ct[CODE] to get string
        ct = {}
        for key, value in CODE_DICT.items():
            ct[value] = key

        txt = f"""
–ü—Ä–∏–≤–µ—Ç! –Ø —Ü–∏—Ñ—Ä–æ–≤–æ–π –≥–æ–ª—É–±—å-–ø–æ—á—Ç–∞–ª—å–æ–Ω –ë–∞—Ç–æ. –ú–æ—è —Ä–∞–±–æ—Ç–∞ - –≤–æ–≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç —É—á–∏—Ç–µ–ª–µ–π. üòâ

~~~~ –ö–æ–º–∞–Ω–¥—ã ~~~~
¬∑ !{ct[CODE.HELP]} - –≤—ã–≤–µ—Å—Ç–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
¬∑ - –ú–µ–Ω—é - –≤—ã–π—Ç–∏ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. 
-- üñäÔ∏è –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –≤—ã 

¬∑ !{ct[CODE.REGISTER]} (username) - –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ —Å –∏–º–µ–Ω–µ–º username. –ï—Å–ª–∏ –∏–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–∞—à–µ –∏–º—è –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å–µ—Ç–∏. –≠—Ç–æ–π –∂–µ –∫–æ–º–∞–Ω–¥–æ–π –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å —Å–µ–±–µ –∏–º—è.
¬∑ !{ct[CODE.USER_INFO]} - –≤—ã–≤–µ—Å—Ç–∏ —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ —à–∫–æ–ª, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã —á–∏—Å–ª–∏—Ç–µ—Å—å.


-- ‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è Ô∏è

¬∑ !{ct[CODE.INFO_SCHOOL]} [school_id] -  –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∫–æ–ª–µ (–≤—Å–µ —á–ª–µ–Ω—ã).
¬∑ !{ct[CODE.INFO_GROUP]} [group_id] - –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –∏ –µ—ë —Å–æ—Å—Ç–∞–≤–µ (–≤—Å–µ —á–ª–µ–Ω—ã).
¬∑ !{ct[CODE.INFO_STUDENT]} [school_id] [vk_id] - –≤—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∫–∞–∫ —á–ª–µ–Ω–µ —à–∫–æ–ª—ã (–≤—Å–µ —á–ª–µ–Ω—ã).


-- üìöüè´ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å –≥—Ä—É–ø–ø–∞–º–∏ –∏ —à–∫–æ–ª–∞–º–∏ 

¬∑ !{ct[CODE.CREATE_SCHOOL]} [school_name] - —Å–æ–∑–¥–∞—Ç—å —à–∫–æ–ª—É —Å –∏–º–µ–Ω–µ–º school_name. 
¬∑ !{ct[CODE.CREATE_GROUP]} [school_id] [group_name] - —Å–æ–∑–¥–∞—Ç—å –≥—Ä—É–ø–ø—É —Å –∏–º–µ–Ω–µ–º group_name –≤ —à–∫–æ–ª–µ —Å school_id (–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å).
¬∑ !{ct[CODE.DELETE_SCHOOL]} [school_id] [school_name] - —É–¥–∞–ª–∏—Ç—å —à–∫–æ–ª—É (–°–æ–∑–¥–∞—Ç–µ–ª—å).
¬∑ !{ct[CODE.DELETE_GROUP]} [group_id] [group_name] - —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—É (–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å).


-- üë®üë¶üëß –û–ø–µ—Ä–∞—Ü–∏–∏ –Ω–∞–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏


¬∑ !{ct[CODE.INVITE_USER]} [school_id] [vk_id] - –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å (–¥–æ–±–∞–≤–∏—Ç—å) –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —à–∫–æ–ª—É –∫–∞–∫ –≤–æ–ª—å–Ω–æ–≥–æ —Å–ª—É—à–∞—Ç–µ–ª—è (–£—á–µ–Ω–∏–∫).
¬∑ !{ct[CODE.ADD_TO_GROUP]} [group_id] [vk_id] - –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥—Ä—É–ø–ø—É (–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å).
¬∑ !{ct[CODE.UPDATE_ROLE]} [school_id] [vk_id] [new_role_id] - —Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä).
¬∑ !{ct[CODE.REMOVE_USER]} [school_id] [vk_id] - –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —à–∫–æ–ª—ã (–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å).
¬∑ !{ct[CODE.REMOVE_USER_FROM_GROUP]} [school_id] [group_id] [vk_id] - –∏—Å–∫–ª—é—á–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –≥—Ä—É–ø–ø—ã (–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å).


-- ‚úâ –û—Ç–ø—Ä–∞–≤–∫–∞ –∏ —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π

¬∑ !{ct[CODE.PM_MSG]} [vk_id] - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
¬∑ !{ct[CODE.GROUP_MSG]} [group_id] - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≥—Ä—É–ø–ø–µ (–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å). 

~~~~~~~~~~~~~~~~

–ë–æ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω –≤ —Ä–∞–º–∫–∞—Ö —à–∫–æ–ª—å–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞ –ì–û–£ –Ø–û "–õ–∏—Ü–µ–π ‚Ññ86" –≤ 2021 –≥–æ–¥—É. 

–ï—Å–ª–∏ –Ω–∞–π–¥—ë—Ç–µ –æ—à–∏–±–∫–∏/–±–∞–≥–∏, —Å–æ–æ–±—â–∏—Ç–µ –º–Ω–µ!
–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @id388032588(–¢–∞–º–ø–∏–æ –ò–ª—å—è), —É—á–µ–Ω–∏–∫ 11–ë –∫–ª–∞—Å—Å–∞.
Github: github.com/Quakumei Telegram: @yasumi404
"""
        return txt

    def help(self, update):
        # Print help
        # msg = update['object']['text']
        user_id = update['object']['from_id']

        buttons_res = [[KeyboardSets.text_button('- –ú–µ–Ω—é', "WHITE")]]
        kb = KeyboardSets.create_kb(True, buttons_res)

        self.vkapi_handler.send_msg(user_id, self.help_text, json_kb=kb)
        return

    def echo(self, update):
        # Send message back
        msg = update['object']['text']
        # # remove command word
        # msg = msg.split(' ', 1)[1]
        if not msg:
            msg = "fgsfds"
        user_id = update['object']['from_id']
        self.vkapi_handler.send_msg(user_id, msg)

    def create_school(self, update):
        # Create school and make vk_id its owner
        msg = update['object']['text']
        user_id = update['object']['from_id']

        # Remove trailing backspace and parse school_name
        school_name = " ".join(Utility.parse_arg(msg))

        school_id = self.db_handler.create_school(school_name, user_id)
        if school_id == -1:
            err = f"–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ. –ù–∞–ø–∏—à–∏—Ç–µ !{'—Ä–µ–≥'} [–ò–º—è_–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è] –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
            self.vkapi_handler.send_msg(user_id, err)
        else:
            txt = f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º, –≤—ã —Å–æ–∑–¥–∞–ª–∏ —à–∫–æ–ª—É {school_name}!\n–ï–π –ø—Ä–∏—Å–≤–æ–µ–Ω –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä - {school_id}."
            self.vkapi_handler.send_msg(user_id, txt)

    def register(self, update):
        # Add vk_id - Name to database (or update it)
        msg = update['object']['text']
        user_id = update['object']['from_id']

        args = Utility.parse_arg(msg)
        if args:
            nickname = " ".join(args)
        else:
            nickname = self.vkapi_handler.get_name(user_id, short=True)

        resp = self.db_handler.user_nickname_update(user_id, nickname)
        if resp != -1:
            txt = f"–í—ã —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ —Å–µ–±–µ –∏–º—è {nickname}."
            self.vkapi_handler.send_msg(user_id, txt)
            self._return(update, "–ú–µ–Ω—é")
        else:
            err = f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏..."
            self.vkapi_handler.send_msg(user_id, err)

    def invalid(self, update):
        # Wrong command
        user_id = update['object']['from_id']
        msg = "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞."
        self.vkapi_handler.send_msg(user_id, msg)

    def invite_user(self, update):
        # Invite vk_id to school_id if you have a permission to.
        msg = update['object']['text']
        user_id = update['object']['from_id']
        args = Utility.parse_arg(msg)
        vk_id = args[1]
        school_id = args[0]
        # TODO: Maybe change that later to real invite system
        code = self.db_handler.add_user(vk_id, school_id, user_id)
        if code == -2:
            err = f"–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {vk_id} —É–∂–µ —É—á–∞—Å—Ç–Ω–∏–∫ —à–∫–æ–ª—ã {school_id}..."
            self.vkapi_handler.send_msg(user_id, err)
        elif code == -1:
            err = f"–û—à–∏–±–∫–∞: –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É..."
            self.vkapi_handler.send_msg(user_id, err)
        elif code == -3:
            err = f"–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {vk_id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ..."
            self.vkapi_handler.send_msg(user_id, err)
        elif code == -4:
            err = f"–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º {school_id}."
            self.vkapi_handler.send_msg(user_id, err)
        else:
            txt = f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {vk_id} –≤ {school_id}."
            self.vkapi_handler.send_msg(user_id, txt)
            notification = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. üîî\n"
            notification += f"–í—ã –±—ã–ª–∏ –ø—Ä–∏–Ω—è—Ç—ã –≤ –∫–∞—á–µ—Å—Ç–≤–µ {self.db_handler.fetch_role_name(5)} –≤ —à–∫–æ–ª—É {self.db_handler.fetch_school_name(school_id)} (school_id: {school_id})" \
                            f"\n(@id{user_id}(–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä))."
            self.vkapi_handler.send_msg(vk_id, notification)

    def create_group(self, update):
        # Create group with school_name in school_id. Return user its id.
        msg = update['object']['text']
        user_id = update['object']['from_id']
        args = Utility.parse_arg(msg)
        school_id = args[0]
        group_name = " ".join(args[1:])

        code = self.db_handler.create_group(group_name, school_id, user_id)
        if code == -4:
            err = f"–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º {school_id}."
            self.vkapi_handler.send_msg(user_id, err)
        elif code == -1:
            err = f"–û—à–∏–±–∫–∞: –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É..."
            self.vkapi_handler.send_msg(user_id, err)
        elif code == -5:
            err = f"–û—à–∏–±–∫–∞: –ì—Ä—É–ø–ø–∞ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º –≤ —à–∫–æ–ª–µ {school_id} —É–∂–µ —Å—É—â–µ—Å—Ç—É–µ—Ç..."
            self.vkapi_handler.send_msg(user_id, err)
        else:
            txt = f"–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –≥—Ä—É–ø–ø—É —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º {group_name} –≤ {school_id}. –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã - {code}."
            self.vkapi_handler.send_msg(user_id, txt)

    def add_to_group(self, update):
        # Add user specified in msg to the group_id
        msg = update['object']['text']
        user_id = update['object']['from_id']
        args = Utility.parse_arg(msg)
        vk_id = args[1]
        group_id = args[0]

        code = self.db_handler.add_to_group(group_id, vk_id, user_id)
        if code == -4:
            err = f"–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —à–∫–æ–ª—ã —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã."
            self.vkapi_handler.send_msg(user_id, err)
        elif code == -1:
            err = f"–û—à–∏–±–∫–∞: –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É..."
            self.vkapi_handler.send_msg(user_id, err)
        elif code == -5:
            err = f"–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º id —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ..."
            self.vkapi_handler.send_msg(user_id, err)
        elif code == -3:
            err = f"–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {vk_id} –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –≤ —Å–∏—Å—Ç–µ–º–µ..."
            self.vkapi_handler.send_msg(user_id, err)
        else:
            txt = f"–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ {vk_id} –≤ –≥—Ä—É–ø–ø—É {group_id}."
            self.vkapi_handler.send_msg(user_id, txt)
            notification = f"""üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. üîî\n–í—ã –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É {self.db_handler.fetch_group_name(group_id)} (group_id: {group_id}).
(@id{user_id}(–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä))"""
            self.vkapi_handler.send_msg(vk_id, notification)

    def update_role(self, update):
        # Changes role of the subject
        msg = update['object']['text']
        user_id = update['object']['from_id']
        args = Utility.parse_arg(msg)
        school_id = args[0]
        vk_id = args[1]
        new_role_id = args[2]
        last_role_id = self.db_handler.fetch_user_school_role(school_id, vk_id)

        code = self.db_handler.update_role(school_id, vk_id, new_role_id, user_id)
        if code == -1:
            err = f"–û—à–∏–±–∫–∞: –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É..."
            self.vkapi_handler.send_msg(user_id, err)

        elif code == -4:
            err = f"–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —à–∫–æ–ª—ã —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã."
            self.vkapi_handler.send_msg(user_id, err)

        elif code == -2:
            err = f"–û—à–∏–±–∫–∞: –£—á–µ–Ω–∏–∫ {vk_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º {school_id}..."
            self.vkapi_handler.send_msg(user_id, err)

        elif code == -3:
            err = f"–û—à–∏–±–∫–∞: –ù–µ—Ç —Ä–æ–ª–∏ {new_role_id}..."
            self.vkapi_handler.send_msg(user_id, err)

        elif code == -5:
            err = f"–û—à–∏–±–∫–∞: –ù–µ—Ç —à–∫–æ–ª—ã {school_id}..."
            self.vkapi_handler.send_msg(user_id, err)
        if code is True:
            txt = f"–í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ —Ä–æ–ª—å '{vk_id}' –≤ —à–∫–æ–ª–µ '{school_id}' –Ω–∞ '{new_role_id}'."
            self.vkapi_handler.send_msg(user_id, txt)
            notification = f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. üîî\n"
            notification += f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ —Å–º–µ–Ω–∞ –≤–∞—à–µ–π —Ä–æ–ª–∏ –≤ {self.db_handler.fetch_school_name(school_id)} (school_id: {school_id}):{self.db_handler.fetch_role_name(last_role_id)} --> {self.db_handler.fetch_role_name(new_role_id)}\n(@id{user_id}(–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä))."
            self.vkapi_handler.send_msg(vk_id, notification)

    def expel(self, update):
        # Removes user from school
        msg = update['object']['text']
        user_id = update['object']['from_id']
        args = Utility.parse_arg(msg)
        school_id = args[0]
        target_id = args[1]

        code = self.db_handler.remove_user(school_id, target_id, user_id)
        if code == -1:
            err = f"–û—à–∏–±–∫–∞: –û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, —Å–æ–æ–±—â–∏—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É..."
            self.vkapi_handler.send_msg(user_id, err)
            return
        elif code == -4:
            err = f"–û—à–∏–±–∫–∞: –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –∏–ª–∏ –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —à–∫–æ–ª—ã —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã."
            self.vkapi_handler.send_msg(user_id, err)
            return
        elif code == -2:
            err = f"–û—à–∏–±–∫–∞: –£—á–µ–Ω–∏–∫ {target_id} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º {self.db_handler.fetch_school_name(school_id)} (school_id: {school_id})..."
            self.vkapi_handler.send_msg(user_id, err)
            return
        elif code == -5:
            err = f"–û—à–∏–±–∫–∞: –ù–µ—Ç —à–∫–æ–ª—ã c school_id: {school_id}..."
            self.vkapi_handler.send_msg(user_id, err)
            return
        elif code is True:
            txt = f"–í—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–∏–ª–∏ '{target_id}' –∏–∑ —à–∫–æ–ª—ã '{school_id}'."
            self.vkapi_handler.send_msg(user_id, txt)

        # Sad letter
        notification = f"""üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. üîî
–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —à–∫–æ–ª—ã '{self.db_handler.fetch_school_name(school_id)}' (school_id: {school_id}) \n(@id{user_id}(–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä))."""
        self.vkapi_handler.send_msg(target_id, notification)

    def expel_from_group(self, update):
        msg = update['object']['text']
        user_id = update['object']['from_id']
        args = Utility.parse_arg(msg)
        school_id = args[0]
        group_id = args[1]
        target_id = args[2]

        # TODO: Write error codes later
        code = self.db_handler.remove_from_group(school_id, group_id, target_id, user_id)

        if code is True:
            txt = f"–í—ã —É—Å–ø–µ—à–Ω–æ –∏—Å–∫–ª—é—á–∏–ª–∏ '{target_id}' –∏–∑ –≥—Ä—É–ø–ø—ã '{group_id}' —à–∫–æ–ª—ã '{school_id}'."
            self.vkapi_handler.send_msg(user_id, txt)
        else:
            err = f"–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ [–ö–æ–¥ –æ—à–∏–±–∫–∏: {code}]..."
            self.vkapi_handler.send_msg(user_id, err)
            return

        # Sad letter
        notification = f"""üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. üîî
–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –≥—Ä—É–ø–ø—ã '{self.db_handler.fetch_group_name(group_id)}' (group_id: {group_id}) \n(@id{user_id}(–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä))"""
        self.vkapi_handler.send_msg(target_id, notification)

    def group_msg(self, update):
        msg = update['object']['text']
        user_id = update['object']['from_id']
        args = Utility.parse_arg(msg)
        group_id = args[0]
        bad_n_flag = False
        if not group_id.isnumeric() and group_id[0].isnumeric():
            bad_n_flag = True
            group_id = group_id.split('\n', 1)[0]

        # God blame me for that please
        if not self.db_handler.group_check(group_id):
            err = f"–£–∫–∞–∑–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç..."
            self.vkapi_handler.send_msg(user_id, err)
            return

        # Permission check
        # Fetch group_ids where can sender send to
        groups_avail = self.db_handler.avail_group_msg_group_ids(user_id)
        if int(group_id) not in groups_avail:
            err = f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –≥—Ä—É–ø–ø–µ {group_id}... (–î–æ—Å—Ç—É–ø–Ω—ã–µ:{groups_avail})"
            self.vkapi_handler.send_msg(user_id, err)
            return

        # Fetch ids
        mailing_list_ids = self.db_handler.fetch_group_members(group_id)

        # Send msg

        # Make msg: sender to whom (group_id and word) and school
        msg = msg.split(' ', 1)[1]
        msg = msg[len(group_id):]

        user_id = user_id
        sender_name = self.db_handler.fetch_user_name(user_id)
        group_name = self.db_handler.fetch_group_name(group_id)

        hat = f"‚úâ –°–æ–æ–±—â–µ–Ω–∏–µ ‚úâ\n[–û–¢: ] {sender_name}(id:{user_id})\n[–ö–û–ú–£: ] {group_name}(group_id:{group_id})\n\n"
        msg = hat + msg
        attachments = update['object']['attachments']
        attachment_str, urls = Utility.parse_attachments2str(attachments)
        if attachment_str:
            footer = f"\n–í–ª–æ–∂–µ–Ω–∏—è:\n" + str("\n".join(urls))
            msg = msg + footer
        for id in mailing_list_ids:
            self.vkapi_handler.send_msg(id, msg, attachment_str)

        txt = f"–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞."
        self.vkapi_handler.send_msg(user_id, txt)
        return

    def pm_msg(self, update):
        # Basically group_send but without fetching id and checking whether both of the users are in the same school
        msg = update['object']['text']
        user_id = update['object']['from_id']
        args = Utility.parse_arg(msg)
        vk_id = args[0]
        bad_n_flag = False
        if not vk_id.isnumeric() and vk_id[0].isnumeric():
            bad_n_flag = True
            group_id = vk_id.split('\n', 1)[0]

        # God blame me for that please
        if not self.db_handler.user_check(vk_id):
            err = f"–£–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç..."
            self.vkapi_handler.send_msg(user_id, err)
            return

        # Permission check
        # Users must be in the same clan.
        a = self.db_handler.fetch_user_schools(vk_id)
        b = self.db_handler.fetch_user_schools(user_id)
        if a and b:
            vk_id_pm_avail = [x[0] for x in self.db_handler.fetch_user_schools(vk_id)]
            user_id_pm_avail = [x[0] for x in self.db_handler.fetch_user_schools(user_id)]
        else:
            err = f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {vk_id}... (–í—ã –¥–æ–ª–∂–Ω—ã —Å–æ—Å—Ç–æ—è—Ç—å –≤ –æ–¥–Ω–æ–π —à–∫–æ–ª–µ)"
            self.vkapi_handler.send_msg(user_id, err)
            return
        if not list(set(vk_id_pm_avail) & set(user_id_pm_avail)):
            err = f"–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {vk_id}... (–í—ã –¥–æ–ª–∂–Ω—ã —Å–æ—Å—Ç–æ—è—Ç—å –≤ –æ–¥–Ω–æ–π —à–∫–æ–ª–µ)"
            self.vkapi_handler.send_msg(user_id, err)
            return

        # Fetch ids
        mailing_list_ids = [vk_id]

        # Send msg

        # Make msg: sender to whom (group_id and word) and school
        msg = msg.split(' ', 1)[1]
        msg = msg[len(vk_id):]

        user_id = user_id
        sender_name = self.db_handler.fetch_user_name(user_id)
        vk_id_name = self.db_handler.fetch_user_name(vk_id)

        hat = f"‚úâ –°–æ–æ–±—â–µ–Ω–∏–µ ‚úâ\n[–û–¢: ] {sender_name}(id:{user_id})\n[–ö–û–ú–£: ] {vk_id_name}(vk_id:{vk_id})\n\n"
        msg = hat + msg
        attachments = update['object']['attachments']
        attachment_str, urls = Utility.parse_attachments2str(attachments)
        if attachment_str:
            footer = f"\n–í–ª–æ–∂–µ–Ω–∏—è:\n" + str("\n".join(urls))
            msg = msg + footer
        for id in mailing_list_ids:
            self.vkapi_handler.send_msg(id, msg, attachment_str)

        txt = f"–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ."
        self.vkapi_handler.send_msg(user_id, txt)
        return

    def delete_school(self, update):
        # Delete school.
        msg = update['object']['text']
        args = Utility.parse_arg(msg)

        # Only '1''s can delete the school.
        user_id = update['object']['from_id']
        school_id = args[0]
        role_id = self.db_handler.fetch_user_school_role(school_id, user_id)
        if not int(role_id) == int('1'):
            err = f"–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (–≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å `Creator`, –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è)`."
            self.vkapi_handler.send_msg(user_id, err)
            return

        # Check whether school is valid
        school_name_given = " ".join(args[1:])
        school_name_true = self.db_handler.fetch_school_name(school_id)
        if school_name_given != school_name_true:
            err = f"–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ —à–∫–æ–ª—ã (–¥–ª—è –≤–∞—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)."
            self.vkapi_handler.send_msg(user_id, err)
            return

        # For sad message
        former_members_ids = self.db_handler.fetch_school_members(school_id)

        self.db_handler.delete_school(school_id)
        txt = f"–£—Å–ø–µ—Ö: —à–∫–æ–ª–∞ `{school_name_true}` (id: {school_id}) –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞."

        # Send poor message to everyone.
        for member_id in former_members_ids:
            notification = f"""üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. üîî
–®–∫–æ–ª–∞ '{school_name_true}' (id: {school_id}) –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞. –ö–∞–∫ —Å–ª–µ–¥—Å—Ç–≤–∏–µ, –≤—ã –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è—è–µ—Ç–µ—Å—å –µ—ë —á–ª–µ–Ω–æ–º.  \n(@id{user_id}(–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä))"""
            self.vkapi_handler.send_msg(member_id, notification)

        self.vkapi_handler.send_msg(user_id, txt)
        return

    def delete_group(self, update):
        # Delete group.
        msg = update['object']['text']
        args = Utility.parse_arg(msg)

        # Only '3''s and higher can delete the school.
        user_id = update['object']['from_id']
        group_id = args[0]
        school_id = self.db_handler.fetch_group_school(group_id)
        role_id = self.db_handler.fetch_user_school_role(school_id, user_id)
        if not int(role_id) <= int('3'):
            err = f"–û—à–∏–±–∫–∞: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ (–≤–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å `Teacher` –∏–ª–∏ –≤—ã—à–µ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è)`."
            self.vkapi_handler.send_msg(user_id, err)
            return

        # Check whether group_name is valid
        group_name_given = " ".join(args[1:])
        group_name_true = self.db_handler.fetch_group_name(group_id)
        if group_name_given != group_name_true:
            err = f"–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–¥–ª—è –≤–∞—à–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)."
            self.vkapi_handler.send_msg(user_id, err)
            return
        # For sad
        former_members_ids = self.db_handler.fetch_group_members(group_id)

        self.db_handler.delete_group(group_id)
        txt = f"–£—Å–ø–µ—Ö: –≥—Ä—É–ø–ø–∞ `{group_name_true}` (id: {group_id}) –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞."

        # Send poor message to everyone.
        for member_id in former_members_ids:
            notification = f"""üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ. üîî
                –ì—Ä—É–ø–ø–∞ '{group_name_true}' (id: {group_id}) –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞. –ö–∞–∫ —Å–ª–µ–¥—Å—Ç–≤–∏–µ, –≤—ã –±–æ–ª—å—à–µ –Ω–µ —è–≤–ª—è—è–µ—Ç–µ—Å—å –µ—ë —á–ª–µ–Ω–æ–º. \n(@id{user_id}(–∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä))"""
            self.vkapi_handler.send_msg(member_id, notification)

        self.vkapi_handler.send_msg(user_id, txt)
        return

    def user_info(self, update):
        # Gives user information about his position in system.
        # –ò–º—è: nickname (id: user_id)
        # Groups_name (group_id: group_id) (school_name: school_name) -------- '[School_name] Group_name - id: id'
        # Schools_name (school_id: school_id) - corresponding role

        msg = update['object']['text']
        user_id = update['object']['from_id']

        # groups_txt
        groups_txt = []
        user_groups = self.db_handler.fetch_user_groups(user_id)
        if not user_groups:
            groups_txt = ["–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –Ω–∏ –≤ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø–µ."]
        else:
            for group in user_groups:
                group_id, school_id, group_name = group
                group_school_name = self.db_handler.fetch_school_name(school_id)
                groups_txt.append(f"[\"{group_school_name}\"] \"{group_name}\" - group_id: {group_id}")

        # schools_txt
        user_schools = self.db_handler.fetch_user_schools(user_id)
        if user_schools is False:
            user_schools = []
        schools_txt = []
        for school in user_schools:
            school_id, creator_id, school_name = school
            role_id = self.db_handler.fetch_user_school_role(school_id, user_id)
            role_name = self.db_handler.fetch_role_name(role_id)
            schools_txt.append(f"-- \"{school_name}\" (school_id: {school_id}) - \"{role_name}\"")

        nickname = self.db_handler.fetch_user_name(user_id)
        endl = '\n'  # Otherwise it won't work

        txt = f"""======== ‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è ‚Ñπ ========
        
–ò–º—è: {nickname} (@id{user_id}(@id{user_id}))
        
-+-+-+-+-+- üìö –ì—Ä—É–ø–ø—ã üìö -+-+-+-+-+-
        {endl.join(groups_txt)}
        
-+-+-+-+-+- üè´ –®–∫–æ–ª—ã üè´ -+-+-+-+-+-
        {endl.join(schools_txt)}
        
        """

        buttons_res = [[KeyboardSets.text_button('- –ú–µ–Ω—é', "WHITE")]]
        kb = KeyboardSets.create_kb(True, buttons_res)

        self.vkapi_handler.send_msg(user_id, txt, json_kb=kb)
        return

    def info_school(self, update):
        msg = update['object']['text']
        user_id = update['object']['from_id']
        args = Utility.parse_arg(msg)
        school_id = args[0]

        # Fetch data
        school_name = self.db_handler.fetch_school_name(school_id)
        school_groups_ids = self.db_handler.fetch_school_groups(school_id)
        school_groups_names = []
        for group_id in school_groups_ids:
            school_groups_names.append(self.db_handler.fetch_group_name(group_id))

        school_groups = []
        for i in range(len(school_groups_ids)):
            school_groups.append((school_groups_ids[i], school_groups_names[i]))

        members_ids = self.db_handler.fetch_school_members(school_id)
        members_names = []
        members_groups = []
        members_roles = []
        for member_id in members_ids:
            members_names.append(self.db_handler.fetch_user_name(member_id))
            # Very bad code you could do better
            members_groups.append([self.db_handler.fetch_group_name(x) for x in
                                   self.db_handler.fetch_user_school_groups(school_id, member_id)])
            members_roles.append(self.db_handler.fetch_user_school_role(school_id, member_id))

        members = []
        # Now we have school_groups (group_id , group_name)
        # Now we have members (role_id, name, group_names, vk_id)
        # Based on data given (school is a tuple (id,school_name))
        # Return text message for the user
        members = sorted(members, key=lambda x: int(x[0]))

        for i in range(len(members_ids)):
            members.append((members_roles[i], members_names[i], members_groups[i], members_ids[i]))

        res = f"""======== ‚Ñπ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —à–∫–æ–ª–µ üè´ ========
        
–ù–∞–∑–≤–∞–Ω–∏–µ: '{school_name}' (school_id: {school_id})
        
======== üìö –®–∫–æ–ª—å–Ω—ã–µ –≥—Ä—É–ø–ø—ã üìö ========\n"""
        for group_id, group_name in school_groups:
            res += f"-- \"{group_name}\" (group_id: {group_id})\n"
        res += f"\n-+-+-+- üë®‚Äçüè´ –ß–ª–µ–Ω—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ üßìüë©‚Äçü¶± -+-+-+-\n"

        members = sorted(members, key=lambda x: int(x[0]))
        prev_role = 0
        cur_role = 0
        for member in members:
            cur_role = member[0]
            if cur_role != prev_role:
                res = res + f"\n{self.db_handler.fetch_role_name(cur_role)}:\n"
                prev_role = cur_role
            # res += f'-- {member[1]} ({", ".join(member[2])}) [id{member[3]}]\n'
            res += f'-- {member[1]} (@id{member[3]}(@id{member[3]}))\n'
        res += '\n' + "-" * 60 + '\n'
        res += f'–ò—Ç–æ–≥–æ: {len(members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n'

        self.vkapi_handler.send_msg(user_id, res)
        self._return(update, "–ú–µ–Ω—é")
        return

        # Now we have school_groups (group_id , group_name)
        # Now we have members (role_id, name, group_names, vk_id)

        # txt = Utility.school_info((school_id, school_name), school_groups, members, self.db_handler)

    def info_group(self, update):
        # sends back message about group_id
        # TODO: check rights
        msg = update['object']['text']
        user_id = update['object']['from_id']
        args = Utility.parse_arg(msg)
        group_id = args[0]
        group_name = self.db_handler.fetch_group_name(group_id)

        members_ids = self.db_handler.fetch_group_members(group_id)
        members = []
        school_id = self.db_handler.fetch_group_school(group_id)
        for member_id in members_ids:
            member_name = self.db_handler.fetch_user_name(member_id)
            members.append((self.db_handler.fetch_user_school_role(school_id, member_id), member_name, 0, member_id))
        members = sorted(members, key=lambda x: int(x[0]))
        res = f"======== –ì—Ä—É–ø–ø–∞ üìö {group_name} ========\n"
        # - üë©‚Äçü¶± –ß–ª–µ–Ω—ã –≥—Ä—É–ø–ø—ã üßì -
        cur_role = 0
        prev_role = 0
        for member in members:
            cur_role = member[0]
            if cur_role != prev_role:
                res = res + f"\n{self.db_handler.fetch_role_name(cur_role)}:\n"
                prev_role = cur_role
            # res += f'-- {member[1]} ({", ".join(member[2])}) [id{member[3]}]\n'
            res += f'-- {member[1]} (@id{member[3]}(@id{member[3]}))\n'
        res += '\n' + "-" * 70 + '\n'
        res += f'–ò—Ç–æ–≥–æ: {len(members)} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.\n'

        buttons_res = [[KeyboardSets.text_button('- –ú–µ–Ω—é', "WHITE")]]
        kb = KeyboardSets.create_kb(True, buttons_res)

        self.vkapi_handler.send_msg(user_id, res, json_kb=kb)

    # def info_school_groups(self, update):
    #     # sends back message about all group_ids of school_id
    #     msg = update['object']['text']
    #     user_id = update['object']['from_id']
    #     args = Utility.parse_arg(msg)
    #     school_id = args[0]

    def info_student(self, update):
        # Returns info about a student as if he lived only in school_id.
        # TODO: Permissions
        # TODO: Feature: show similar groups.
        msg = update['object']['text']
        user_id = update['object']['from_id']
        args = Utility.parse_arg(msg)
        school_id = args[0]
        school_name = self.db_handler.fetch_school_name(school_id)
        student_id = args[1]
        student_name = self.db_handler.fetch_user_name(student_id)

        res = f"""======== üßç –ß–µ–ª–æ–≤–µ–∫ –≤ {school_name} üè´ ========

–ò–º—è: {student_name} (@id{student_id}(@id{student_id}))
–†–æ–ª—å: {self.db_handler.fetch_role_name(self.db_handler.fetch_user_school_role(school_id, student_id))}
        
-+-+-+-+-+- üìö  –ì—Ä—É–ø–ø—ã -+-+-+-+-+-\n"""

        student_groups_ids = self.db_handler.fetch_user_school_groups(school_id, student_id)
        user_groups_ids = self.db_handler.fetch_user_school_groups(school_id, user_id)
        groups = [(x, self.db_handler.fetch_group_name(x), x in user_groups_ids) for x in student_groups_ids]

        for group in groups:
            group_id = group[0]
            group_name = group[1]
            group_mutual = group[2]
            res += f"-- {group_name} {'üü¢ ' if group_mutual else '  '}(group_id: {group_id})\n"
        res += "-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-"
        if True in [x[2] for x in groups]:
            res += "\nüü¢ - –æ–±—â–∏–µ –≥—Ä—É–ø–ø—ã"
        self.vkapi_handler.send_msg(user_id, res)
        return

    def register_prompt(self, update):
        # –°—é–¥–∞ –∫–∏–¥–∞–µ—Ç –∫–æ–≥–¥–∞ –Ω–∞–∂–∏–º–∞–µ—à—å –∫–Ω–æ–ø–∫—É –Ω–∞—á–∞—Ç—å.
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è.
        user_id = update['object']['from_id']
        msg = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
        user_vk_name = self.vkapi_handler.get_name(user_id, short=True)
        buttons = KeyboardSets.get_register_buttons(user_vk_name)
        print(buttons)
        self.vkapi_handler.send_msg(user_id, msg, json_kb=buttons)
        return

    def choose_school(self, user_id, level, words, full=False, buttons_rows=2):
        # message maker for _continue
        # buttons, txt = choose_school(user_id, level)
        # Message
        buttons = []
        schools = self.db_handler.fetch_user_schools(user_id, 4)
        schools_txt = Utility.schools2txt(schools)
        txt = schools_txt + "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —à–∫–æ–ª—É."

        # Buttons
        for sch in schools:
            buttons.append(
                KeyboardSets.text_button(f"{COMMAND_SYMBOL if full else (IGNORE_SYMBOL+' ')}{' '.join(words + [str(sch[0])])}", "GREEN"))
        buttons = Utility.arrange_buttons(buttons, buttons_rows)
        return buttons, txt

    def choose_group(self, user_id, level, words, full=False, buttons_rows=2):
        # message maker for _continue
        # buttons, txt = choose_group(user_id, level)
        # Message
        buttons = []
        groups = self.db_handler.fetch_user_groups(user_id, 5)
        groups_txt = Utility.groups2txt(groups)
        txt = groups_txt + "\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É."

        # Buttons
        for g in groups:
            buttons.append(
                KeyboardSets.text_button(f"{COMMAND_SYMBOL}{' '.join(words + [str(g[0])])}", "GREEN"))
        buttons = Utility.arrange_buttons(buttons, 2)
        return buttons, txt

    def _continue(self, update):
        # ??? Menu?

        # Action types according to count of arguments
        INSTANT = [USER_INFO_WORD, HELP_WORD, REGISTER_WORD]
        ONE_ARG = [INFO_SCHOOL_WORD, INFO_GROUP_WORD]
        TWO_ARG = [INVITE_USER_WORD, REMOVE_USER_WORD, INFO_STUDENT_WORD]
        THR_ARG = [UPDATE_ROLE_WORD, REMOVE_USER_FROM_GROUP_WORD]
        MANUAL = [CREATE_SCHOOL_WORD, DELETE_SCHOOL_WORD,
                  CREATE_GROUP_WORD, DELETE_GROUP_WORD,
                  GROUP_MSG_WORD, PM_MSG_WORD]

        msg = update['object']['text'][2:]
        user_id = update['object']['from_id']
        buttons = []
        txt = '<._._.>'

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        words = msg.split(' ')
        args_count = len(words) - 1

        if words[0] in TWO_ARG:
            if args_count == 0:
                if words[0] == INVITE_USER_WORD:
                    buttons, txt = self.choose_school(user_id, 4, words)

                elif words[0] == REMOVE_USER_WORD:
                    buttons, txt = self.choose_school(user_id, 3, words)

                elif words[0] == INFO_STUDENT_WORD:
                    buttons, txt = self.choose_school(user_id, 5, words)

            elif args_count == 1:
                if words[0] == INVITE_USER_WORD:
                    pass
                elif words[0] == REMOVE_USER_WORD:
                    pass
                elif words[0] == INFO_STUDENT_WORD:
                    pass
                pass
            elif args_count == 2:
                if words[0] == INVITE_USER_WORD:
                    pass
                elif words[0] == REMOVE_USER_WORD:
                    pass
                elif words[0] == INFO_STUDENT_WORD:
                    pass
                # Only cases when group is needed to be shown.
                pass

        elif words[0] in ONE_ARG:
            if args_count == 0:
                # Display info and show buttons
                if words[0] == INFO_GROUP_WORD:
                    buttons, txt = self.choose_group(user_id, 5, words, full=True)

                elif words[0] == INFO_SCHOOL_WORD:
                    buttons, txt = self.choose_school(user_id, 5, words, full=True)

            elif args_count == 1:
                # That won't happen.
                return

        elif words[0] in ["–ü–æ—Ç–æ–º", "–û—Ç–º–µ–Ω–∞", "–ú–µ–Ω—é"]:
            # –í—ã–≤–µ—Å—Ç–∏ –º–µ–Ω—é—à–∫—É.
            txt = "–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ !–ø–æ–º–æ—â—å"
            buttons = []
            for i in CODE_DICT:
                if i not in []:
                    if i in INSTANT:  # Action ready
                        buttons.append(KeyboardSets.text_button(f"{COMMAND_SYMBOL}{i}", color="BLUE"))
                    else:
                        buttons.append(KeyboardSets.text_button(f"{IGNORE_SYMBOL} {i}", color="WHITE"))
            buttons = Utility.arrange_buttons(buttons, 3)

        buttons.append([KeyboardSets.text_button('- –û—Ç–º–µ–Ω–∞', "WHITE")])
        buttons = KeyboardSets.create_kb(True, buttons)
        self.vkapi_handler.send_msg(user_id, txt, json_kb=buttons)
        return

    def _return(self, update, word="–û—Ç–º–µ–Ω–∞"):
        # Prints button to go home
        msg = update['object']['text'][2:]
        user_id = update['object']['from_id']
        ans = '<...>'
        buttons_res = [[KeyboardSets.text_button(f'- {word}', "WHITE")]]
        kb = KeyboardSets.create_kb(True, buttons_res, False)
        self.vkapi_handler.send_msg(user_id, ans, json_kb=kb)

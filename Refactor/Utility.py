# Here comes everything I didn't know where to put

def parse_arg(cmd):
    """
    –í—ã—á–ª–µ–Ω—è–µ—Ç —Ç–æ, —á—Ç–æ –∏–¥—ë—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –º–∞—Å—Å–∏–≤ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
    –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –Ω–µ—Ç, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç False
    :param cmd:
    :return:
    """
    # Get second word from split
    try:
        arg = cmd.split(' ', 1)[1]
    except IndexError:
        return False

    # Remove trailing backspaces
    while arg and arg[-1] == " ":
        arg = arg[:-1]
    args = arg.split(" ")
    if args == ['']:
        return False
    return args


# Few unit tests
assert (parse_arg("!—Å–æ–∑–¥–∞—Ç—å_—à–∫–æ–ª—É –õ–∏—Ü–µ–π ‚Ññ86  ") == ["–õ–∏—Ü–µ–π", "‚Ññ86"]), "Wrong parse_arg result 1."
assert (parse_arg("!—Å–æ–∑–¥–∞—Ç—å_—à–∫–æ–ª—É       ") is False), "Wrong parse_arg result 2."


def parse_attachments2str(attachments):
    # Used in sending messages with attachments via VkApiHandler.py
    res = ""
    urls = []
    for a in attachments:
        # url
        if a['type'] in ["doc", "audio"]:
            urls.append(a[a['type']]['url'])
        else:
            if a['type'] == 'photo':
                max_height = 0
                for i in a[a['type']]['sizes']:
                    if i['height'] > max_height:
                        max_height = i['height']
                for i in a[a['type']]['sizes']:
                    print(i)
                    if i['height'] == max_height:
                        urls.append(i['url'])
                        print(i['url'])
                        break
            elif a[a['type']] == 'video':
                urls.append(a['type'] + str(a[a['type']]['owner_id']) + "_" + str(a[a['type']]['id']))

        res += a['type'] + str(a[a['type']]['owner_id']) + "_" + str(a[a['type']]['id']) + ","

    # print(attachments)
    # print(res[:-1])

    if res == "":
        return "", ""
    return res[:-1], urls

def groups_list_txt(group_ids, db_handler):
    txt = f"""-+-+-+-+-+- üìö –ì—Ä—É–ø–ø—ã üìö -+-+-+-+-+-\n\n"""
    groups = [(x, db_handler.fetch_group_name(x)) for x in group_ids]
    for group in groups:
        group_id = group[0]
        group_name = group[1]

        txt += f"-- {group_name} (group_id: {group_id})\n"
    txt += "-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-"
    return txt

# –°–ø–∞—Å–∏–±–æ, –∏–∑-–∑–∞ –±–∞–≥–∞ –≤ –≤–∫ API —É –º–µ–Ω—è –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –≤ payload –∫–Ω–æ–ø–æ–∫ –∑–∞–ø–∏—Ö–∏–≤–∞—Ç—å –∫–∏—Ä–∏–ª–ª–∏—Ü—É –∏ —è –≤—ã–Ω—É–∂–¥–µ–Ω –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–ª—è—Å–∫—É
# –°–ø–æ–Ω—Å–æ—Ä —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∞—Ü–∏–∏ —ç—Ç–æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫. –≠—Ç–æ—Ç –∏—Å—Ç–æ—á–Ω–∏–∫ - —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –Ω–µ –æ–≤–µ—Ä—Ñ–ª–æ—É https://habr.com/ru/post/265455/)
ALPHABET_L2CYR = {
    '–ê': "A",
    '–ë': "B",
    '–í': "V",
    '–ì': "G",
    '–î': "D",
    '–ï': "E",
    '–Å': "JE",
    '–ñ': "ZH",
    '–ó': "Z",
    '–ò': "I",
    '–ô': "Y",
    '–ö': "K",
    '–õ': "L",
    '–ú': "M",
    '–ù': "N",
    '–û': "O",
    '–ü': "P",
    '–†': "R",
    '–°': "S",
    '–¢': "T",
    '–£': "U",
    '–§': "F",
    '–•': "KH",
    '–¶': "C",
    '–ß': "CH",
    '–®': "SH",
    '–©': "JSH",
    '–™': "HH",
    '–´': "IH",
    '–¨': "JH",
    '–≠': "EH",
    '–Æ': "JU",
    '–Ø': "JA",
    '–∞': "a",
    '–±': "b",
    '–≤': "v",
    '–≥': "g",
    '–¥': "d",
    '–µ': "e",
    '—ë': "je",
    '–∂': "zh",
    '–∑': "z",
    '–∏': "i",
    '–π': "y",
    '–∫': "k",
    '–ª': "l",
    '–º': "m",
    '–Ω': "n",
    '–æ': "o",
    '–ø': "p",
    '—Ä': "r",
    '—Å': "s",
    '—Ç': "t",
    '—É': "u",
    '—Ñ': "f",
    '—Ö': "kh",
    '—Ü': "c",
    '—á': "ch",
    '—à': "sh",
    '—â': "jsh",
    '—ä': "hh",
    '—ã': "ih",
    '—å': "jh",
    '—ç': "eh",
    '—é': "ju",
    '—è': "ja"
}
ALPHABET_CYR2L = {}
for (key, value) in ALPHABET_CYR2L.items():
    ALPHABET_CYR2L[value] = key


def lat2cyr(s):
    ab = ALPHABET_L2CYR
    sb = ""
    i = 0
    while i < len(s):
        ch = s[i]
        if ch == 'J' or ch == 'j':
            i += 1

            # TODO: make it prettier
            ch = s[i]
            if ch == 'E':
                sb += '–Å'
            elif ch == 'e':
                sb += '—ë'
            elif ch == 'S':
                sb += '–©'
                i += 1
                if (s[i] != 'H'): raise Exception
            elif ch == 's':
                sb += '—â'
                i += 1
                if (s[i] != 'h'): raise Exception
            elif ch == 'H':
                sb += '–¨'
            elif ch == 'U':
                sb += '–Æ'
            elif ch == 'A':
                sb += '–Ø'
            elif ch == 'h':
                sb += '—å'
            elif ch == 'u':
                sb += '—é'
            elif ch == 'a':
                sb += '—è'
            else:
                raise Exception
        elif (i + 1 < len(s) and (s[i + 1] == 'H' or s[i + 1] == 'h') and not (
                i + 2 < len(s) and (s[i + 2] == 'H' or s[i + 2] == 'h'))):
            a = {'Z': '–ñ',
                 'K': '–•',
                 'C': '–ß',
                 'S': '–®',
                 'E': '–≠',
                 'H': '–™',
                 'I': '–´',
                 'z': '–∂',
                 'k': '—Ö',
                 'c': '—á',
                 's': '—à',
                 'e': '—ç',
                 'h': '—ä',
                 'i': '—ã',
                 }
            if ch in a:
                sb += a[ch]
            else:
                raise Exception
        else:
            if ch in ab:
                sb += ab[ch]
            else:
                sb += ch


def cyr2lat(cyr):
    res = ""
    for letter in cyr:
        if letter in ALPHABET_L2CYR:
            res += ALPHABET_L2CYR[letter]
        else:
            res += letter
    return res
